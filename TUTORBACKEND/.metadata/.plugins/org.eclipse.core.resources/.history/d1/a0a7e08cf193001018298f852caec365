package com.tutorfinder.service;

import com.tutorfinder.dto.TutorProfileDTO;
import com.tutorfinder.model.TutorProfile;
import com.tutorfinder.model.User;
import com.tutorfinder.repository.TutorProfileRepository;
import com.tutorfinder.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class TutorProfileService {

    @Autowired
    private TutorProfileRepository tutorProfileRepository;

    @Autowired
    private UserRepository userRepository;

    // Create profile
    public TutorProfile createProfile(Long userId, TutorProfile profile) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        Optional<TutorProfile> existingProfile = tutorProfileRepository.findByUserId(userId);
        if (existingProfile.isPresent()) {
            throw new RuntimeException("Profile already exists");
        }

        profile.setUserId(userId);
        profile.setName(user.getName());
        profile.setEmail(user.getEmail());

        return tutorProfileRepository.save(profile);
    }

    // Update profile
    public TutorProfile updateProfile(Long userId, TutorProfile updatedProfile) {
        TutorProfile existingProfile = tutorProfileRepository.findByUserId(userId)
                .orElseThrow(() -> new RuntimeException("Profile not found"));

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        existingProfile.setSubjects(updatedProfile.getSubjects());
        existingProfile.setExperience(updatedProfile.getExperience());
        existingProfile.setBio(updatedProfile.getBio());
        existingProfile.setHourlyRate(updatedProfile.getHourlyRate());
        existingProfile.setLocation(updatedProfile.getLocation());
        existingProfile.setAvailability(updatedProfile.getAvailability());

        existingProfile.setName(user.getName());
        existingProfile.setEmail(user.getEmail());

        return tutorProfileRepository.save(existingProfile);
    }

    // Get profile DTO
    public TutorProfileDTO getProfileWithUserInfo(Long userId) {
        TutorProfile profile = tutorProfileRepository.findByUserId(userId)
                .orElseThrow(() -> new RuntimeException("Profile not found"));

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        return new TutorProfileDTO(
                profile.getId(),
                user.getName(),
                user.getEmail(),
                profile.getSubjects(),
                profile.getExperience(),
                profile.getBio(),
                profile.getHourlyRate(),
                profile.getLocation(),
                profile.getAvailability()
        );
    }

    // Get all tutors
    public List<TutorProfileDTO> getAllTutorsWithUserInfo() {
        List<TutorProfile> profiles = tutorProfileRepository.findAll();
        return profiles.stream().map(profile -> {
            User user = userRepository.findById(profile.getUserId())
                    .orElseThrow(() -> new RuntimeException("User not found"));

            return new TutorProfileDTO(
                    profile.getId(),
                    user.getName(),
                    user.getEmail(),
                    profile.getSubjects(),
                    profile.getExperience(),
                    profile.getBio(),
                    profile.getHourlyRate(),
                    profile.getLocation(),
                    profile.getAvailability()
            );
        }).collect(Collectors.toList());
    }
}
