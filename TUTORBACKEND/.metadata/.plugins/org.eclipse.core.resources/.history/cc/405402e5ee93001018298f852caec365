package com.tutorfinder.service;

import com.tutorfinder.dto.TutorProfileDTO;
import com.tutorfinder.model.TutorProfile;
import com.tutorfinder.model.User;
import com.tutorfinder.repository.TutorProfileRepository;
import com.tutorfinder.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class TutorProfileService {

    @Autowired
    private TutorProfileRepository tutorProfileRepository;

    @Autowired
    private UserRepository userRepository;

    // ✅ Create profile (first time)
    public TutorProfile createProfile(Long userId, TutorProfile profile) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found with id: " + userId));

        profile.setUserId(user.getId());
        profile.setName(user.getName());
        profile.setEmail(user.getEmail());

        return tutorProfileRepository.save(profile);
    }

    // ✅ Update profile (insert if not exists)
    public TutorProfile updateProfile(Long userId, TutorProfile profile) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found with id: " + userId));

        return tutorProfileRepository.findByUserId(userId)
                .map(existing -> {
                    existing.setAvailability(profile.getAvailability());
                    existing.setBio(profile.getBio());
                    existing.setExperience(profile.getExperience());
                    existing.setHourlyRate(profile.getHourlyRate());
                    existing.setLocation(profile.getLocation());
                    existing.setSubjects(profile.getSubjects());

                    // always keep user info in sync
                    existing.setName(user.getName());
                    existing.setEmail(user.getEmail());

                    return tutorProfileRepository.save(existing);
                })
                .orElseGet(() -> {
                    profile.setUserId(userId);
                    profile.setName(user.getName());
                    profile.setEmail(user.getEmail());
                    return tutorProfileRepository.save(profile);
                });
    }

    // ✅ Get tutor profile (returns user info even if profile doesn’t exist yet)
    public TutorProfileDTO getProfileWithUserInfo(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found with id: " + userId));

        return tutorProfileRepository.findByUserId(userId)
                .map(profile -> new TutorProfileDTO(
                        profile.getId(),
                        user.getName(),
                        user.getEmail(),
                        profile.getAvailability(),
                        profile.getBio(),
                        profile.getExperience(),
                        profile.getHourlyRate(),
                        profile.getLocation(),
                        profile.getSubjects()
                ))
                .orElse(new TutorProfileDTO(
                        null,
                        user.getName(),
                        user.getEmail(),
                        null, null, null, null, null, null
                ));
    }

    // ✅ Get all tutors (merge user + profile info)
    public List<TutorProfileDTO> getAllTutorsWithUserInfo() {
        List<TutorProfile> profiles = tutorProfileRepository.findAll();

        return profiles.stream().map(profile -> {
            User user = userRepository.findById(profile.getUserId())
                    .orElseThrow(() -> new RuntimeException("User not found for profile"));

            return new TutorProfileDTO(
                    profile.getId(),
                    user.getName(),
                    user.getEmail(),
                    profile.getAvailability(),
                    profile.getBio(),
                    profile.getExperience(),
                    profile.getHourlyRate(),
                    profile.getLocation(),
                    profile.getSubjects()
            );
        }).collect(Collectors.toList());
    }

    // ✅ Delete tutor profile
    public void deleteProfile(Long userId) {
        tutorProfileRepository.findByUserId(userId)
                .ifPresent(tutorProfileRepository::delete);
    }
}
