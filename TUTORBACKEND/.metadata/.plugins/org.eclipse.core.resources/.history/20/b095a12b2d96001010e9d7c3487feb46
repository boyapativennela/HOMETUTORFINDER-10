package com.tutorfinder.controller;

import com.tutorfinder.dto.BookingResponseDTO;
import com.tutorfinder.model.Booking;
import com.tutorfinder.model.TutorProfile;
import com.tutorfinder.model.User;
import com.tutorfinder.repository.TutorProfileRepository;
import com.tutorfinder.repository.UserRepository;
import com.tutorfinder.service.BookingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/bookings")
@CrossOrigin(origins = "http://localhost:5173")
public class BookingController {

    @Autowired
    private BookingService bookingService;

    @Autowired
    private TutorProfileRepository tutorProfileRepository;

    @Autowired
    private UserRepository userRepository;

    // ✅ Get bookings for a tutor (via userId)
    @GetMapping("/tutor/user/{userId}")
    public ResponseEntity<List<BookingResponseDTO>> getTutorBookingsByUserId(@PathVariable("userId") Long userId) {
        TutorProfile profile = tutorProfileRepository.findByUserId(userId)
                .orElseThrow(() -> new RuntimeException("Tutor profile not found"));
        Long tutorId = profile.getId();

        List<Booking> bookings = bookingService.getTutorBookings(tutorId);

        return ResponseEntity.ok(
                bookings.stream()
                        .map(this::convertToDTO)
                        .collect(Collectors.toList())
        );
    }

    // ✅ Update booking status (Accept/Decline)
    @PutMapping("/{bookingId}")
    public ResponseEntity<BookingResponseDTO> updateStatus(
            @PathVariable Long bookingId,
            @RequestBody Booking updatedBooking
    ) {
        Booking updated = bookingService.updateBookingStatus(bookingId, updatedBooking.getStatus());
        return ResponseEntity.ok(convertToDTO(updated));
    }

    // ✅ Convert Booking -> BookingResponseDTO
    private BookingResponseDTO convertToDTO(Booking booking) {
        User student = userRepository.findById(booking.getStudentId())
                .orElseThrow(() -> new RuntimeException("Student not found"));

        return new BookingResponseDTO(
                booking.getId(),
                booking.getStudentId(),
                student.getName(),
                student.getEmail(),   // new
                student.getPhone(),   // new
                booking.getTutorId(),
                booking.getStatus()
        );
    }
}
