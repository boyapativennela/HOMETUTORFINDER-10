package com.tutorfinder.controller;

import com.tutorfinder.dto.BookingResponse;
import com.tutorfinder.model.Booking;
import com.tutorfinder.model.TutorProfile;
import com.tutorfinder.repository.TutorProfileRepository;
import com.tutorfinder.service.BookingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/bookings")
@CrossOrigin(origins = "http://localhost:5173")
public class BookingController {

    @Autowired
    private BookingService bookingService;

    @Autowired
    private TutorProfileRepository tutorProfileRepository;

    // Book a session
    @PostMapping("/book")
    public ResponseEntity<BookingResponse> bookSession(@RequestBody Booking booking) {
        booking.setStatus("pending");
        Booking saved = bookingService.bookSession(booking);
        return ResponseEntity.ok(
                new BookingResponse(saved.getId(), saved.getStatus(), saved.getStudent(), saved.getTutor())
        );
    }

    // Get bookings by tutor profile id
    @GetMapping("/tutor/{tutorId}")
    public ResponseEntity<List<BookingResponse>> getTutorBookings(@PathVariable Long tutorId) {
        return ResponseEntity.ok(
                bookingService.getTutorBookings(tutorId)
                        .stream()
                        .map(b -> new BookingResponse(b.getId(), b.getStatus(), b.getStudent(), b.getTutor()))
                        .toList()
        );
    }

    // Get bookings by tutor's userId
    @GetMapping("/tutor/user/{userId}")
    public ResponseEntity<List<BookingResponse>> getTutorBookingsByUserId(@PathVariable("userId") Long userId) {
        TutorProfile profile = tutorProfileRepository.findByUserId(userId)
                .orElseThrow(() -> new RuntimeException("Tutor profile not found"));
        Long tutorId = profile.getId();

        return ResponseEntity.ok(
                bookingService.getTutorBookings(tutorId)
                        .stream()
                        .map(b -> new BookingResponse(b.getId(), b.getStatus(), b.getStudent(), b.getTutor()))
                        .toList()
        );
    }

    // Update booking status
    @PutMapping("/{bookingId}")
    public ResponseEntity<BookingResponse> updateStatus(
            @PathVariable Long bookingId,
            @RequestBody Booking updatedBooking
    ) {
        Booking updated = bookingService.updateBookingStatus(bookingId, updatedBooking.getStatus());
        return ResponseEntity.ok(
                new BookingResponse(updated.getId(), updated.getStatus(), updated.getStudent(), updated.getTutor())
        );
    }
}
